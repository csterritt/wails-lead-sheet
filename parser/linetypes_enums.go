// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums line-type.go

package parser

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
)

type LineType struct {
	lineType
}

type linetypesContainer struct {
	TEXT    LineType
	SECTION LineType
	CHORDS  LineType
	LYRICS  LineType
	EMPTY   LineType
}

var LineTypes = linetypesContainer{
	TEXT: LineType{
		lineType: Text,
	},
	SECTION: LineType{
		lineType: Section,
	},
	CHORDS: LineType{
		lineType: Chords,
	},
	LYRICS: LineType{
		lineType: Lyrics,
	},
	EMPTY: LineType{
		lineType: Empty,
	},
}

func (c linetypesContainer) All() []LineType {
	return []LineType{
		c.TEXT,
		c.SECTION,
		c.CHORDS,
		c.LYRICS,
		c.EMPTY,
	}
}

var invalidLineType = LineType{}

func ParseLineType(a any) (LineType, error) {
	res := invalidLineType
	switch v := a.(type) {
	case LineType:
		return v, nil
	case []byte:
		res = stringToLineType(string(v))
	case string:
		res = stringToLineType(v)
	case fmt.Stringer:
		res = stringToLineType(v.String())
	case int:
		res = intToLineType(v)
	case int64:
		res = intToLineType(int(v))
	case int32:
		res = intToLineType(int(v))
	}
	return res, nil
}

func stringToLineType(s string) LineType {
	switch s {
	case "Text":
		return LineTypes.TEXT
	case "Section":
		return LineTypes.SECTION
	case "Chords":
		return LineTypes.CHORDS
	case "Lyrics":
		return LineTypes.LYRICS
	case "Empty":
		return LineTypes.EMPTY
	}
	return invalidLineType
}

func intToLineType(i int) LineType {
	if i < 0 || i >= len(LineTypes.All()) {
		return invalidLineType
	}
	return LineTypes.All()[i]
}

func ExhaustiveLineTypes(f func(LineType)) {
	for _, p := range LineTypes.All() {
		f(p)
	}
}

var validLineTypes = map[LineType]bool{
	LineTypes.TEXT:    true,
	LineTypes.SECTION: true,
	LineTypes.CHORDS:  true,
	LineTypes.LYRICS:  true,
	LineTypes.EMPTY:   true,
}

func (p LineType) IsValid() bool {
	return validLineTypes[p]
}

func (p LineType) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *LineType) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseLineType(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *LineType) Scan(value any) error {
	newp, err := ParseLineType(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p LineType) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[Text-0]
	_ = x[Section-1]
	_ = x[Chords-2]
	_ = x[Lyrics-3]
	_ = x[Empty-4]
}

const _linetypes_name = "TextSectionChordsLyricsEmpty"

var _linetypes_index = [...]uint16{0, 4, 11, 17, 23, 28}

func (i lineType) String() string {
	if i < 0 || i >= lineType(len(_linetypes_index)-1) {
		return "linetypes(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _linetypes_name[_linetypes_index[i]:_linetypes_index[i+1]]
}
